Qué implica?:

  - Ningún cliente debería ser forzado a depender en métodos que no usa.

  e.g: tenemos un aparato en nuestra oficina que nos permite imprimir, escanear y enviar fax, si
    quisiéramos representar las funcionalidades de este aparato como un objeto, podríamos
    implementar una interfaz que contenga todo este comportamiento. Posteriormente, vemos que en
    nuestra oficina hay otro aparato que permite imprimir y escanear, así que creamos la clase de
    este aparato haciendo que implemente la interfaz pero dejamos el comportamiento de los fax en
    blanco, sin implementar. Posteriormente vemos otro aparato más, este solamente permite realizar
    impresiones, por lo que, por ende, va a tener que dejar el comportamiento de escaner y de los
    fax en blanco, sin implementar.

    Tener comportamiento en blanco en nuestros objetos parece algo inofensivo pero puede volverse
    bastante tricky y confuso a la hora de trabajar en nuestro entorno.

Cómo solucionarlo?:

  - Podemos segregar las interfaces y que los objetos implementen solamente las interfaces que de
    verdad tengan que implementar y no tener métodos que no les correspondan.

Cómo identificar que estamos rompiendo este principio?:

  1. Interfaces demasiado grandes o con muchos métodos.
  2. Interfaces con baja cohesión.
  3. Implementaciones vacías de métodos.


Este principio se complementa con otros principios de SOLID. Por ejemplo, cuando segregamos las
responsabilidades de las interfaces estamos cumpliendo con el principio de Single Responsability ya
que nuestra interfaz solamente tiene una funcionalidad. Asímismo vamos a estar cumpliendo con el
principio de Liskov Substitution, ya que podremos sustituir la interfaz con clases que hagan
implementación de la misma.
